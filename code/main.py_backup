import pygame
import os
import time
import random



WIDTH ,HEIGHT = 800, 600


class Game:
    FPS = 60
    def __init__(self, win_width, win_height, spaceship_vel=6 ):
        self.win_width =win_width #window width
        self.win_height = win_height #window height
        self.win_rect = pygame.Rect(0, 0, self.win_width, self.win_height)
        self.hit = False

        # function calling
        pygame.font.init()

        # Assets section
        self.assets="assets/"
        self.check_assets()
        self.Time_font = pygame.font.SysFont("comicsans", 30)
        self.VEL_font = pygame.font.SysFont("comicsans", 40)

        #TUNING VARIABLE shouhd be 0 in for standard state
        self.FORWARD_TIME=0 #in second should be 0 in for standard state
        self.REDUCE_INCREMENT_TIME=0

        #Time section
        self.clock = pygame.time.Clock()
        self.start_time = time.time() - self.FORWARD_TIME
        self.elapsed_time = 0

        # Bomb section
        self.bomb_width, self.bomb_height = 6, 14
        self.bomb_vel = 3
        self.bomb_num = 5 # number of bomb added in one time
        self.max_bomb = 26
        self.bomb_increment_time = 2000-self.REDUCE_INCREMENT_TIME # time interval to add new bomb (in ms) 
        self.bomb_add_time = 0  # last time bomb added to game
        self.bomb_passed=0
        self.bombs = [] # list of bomb rect object

        # spaceship section
        self.spaceship_vel = spaceship_vel
        self.spaceship_height, self.spaceship_width = 40, 60 #define it by rect object
        #spaceship pos bottom center
        self.spaceship_rect = pygame.Rect( 
            self.win_width//2-self.spaceship_height//2, self.win_height-self.spaceship_width, self.spaceship_height, self.spaceship_width)
        self.space_ship = pygame.transform.scale(pygame.image.load(
            self.assets+"Space-Invaders-Ship.png"), self.spaceship_rect.size)


        #Graphics section
        self.win=pygame.display.set_mode(self.win_rect.size)
        pygame.display.set_caption("Space Game")
        self.bg_space = pygame.transform.scale(pygame.image.load(self.assets+"bg.jpeg"), self.win_rect.size)
        bombTemp=pygame.transform.rotate(pygame.image.load(self.assets+"bomb2.png"), 180)
        self.bomb = pygame.transform.scale(bombTemp, (self.bomb_width+5, self.bomb_height+15)) #bomb image size bigger than bomb rect size

        # print("Object created")

    def check_assets(self):
        # check current directory if its has chid directory assets or it parent directory has assets
        if not os.path.isdir(self.assets):
            if os.path.isdir("../"+self.assets):
                self.assets="../"+self.assets
                print("assets directory found in parent directory")
            else:
                print("assets directory not found")
        else:
            print("assets directory found in current directory")


    def draw(self):
        self.time_text = self.Time_font.render(
        f"Time : {round(self.elapsed_time) }", True, "white")
        self.win.blit(self.time_text, (5, 5))
        self.win.blit(self.space_ship, self.spaceship_rect)
        for bomb in self.bombs:
            self.win.blit(self.bomb, (bomb.x, bomb.y))

        pygame.display.update()
        # print("draw function called")
        
    def draw_opInfo(self):
        """draw operation info on screen
        read the current value of bomb_vel,ship_vel,bomb_passed and draw on screen
        """
        self.bomb_vel_text = self.VEL_font.render(
                f"Bomb vel : {self.bomb_vel:2>.2f}" , True, "white")
        self.win.blit(self.bomb_vel_text, (WIDTH-self.bomb_vel_text.get_width(), 5))
        self.ship_vel_text = self.VEL_font.render(
                    f"ship vel : {self.spaceship_vel:2>.2f}" , True, "white")
        self.win.blit(self.ship_vel_text, (WIDTH-self.ship_vel_text.get_width(), self.bomb_vel_text.get_height()))
        self.bomb_passed_text = self.VEL_font.render(
                    f"BOMB COUNT : {self.bomb_passed:4}", True, "white")
        self.win.blit(self.bomb_passed_text, (WIDTH-self.bomb_passed_text.get_width(),self.bomb_passed_text.get_height()+ self.bomb_vel_text.get_height()))
        pygame.display.update()

        # print("draw_opInfo function called")


    def Run(self):
        run = True

        while run:
            print(self.clock.tick(Game.FPS))
            self.bomb_add_time += self.clock.tick(Spaceship.FPS) #self.clock.tick(FPS) return the time in ms since the last call
            self.elapsed_time = time.time() - self.start_time #time.time() return the time in second since the epoch
            self.bomb_vel=min(8.5,self.bomb_vel+self.elapsed_time*0.03)
            self.spaceship_vel=min(7.5,self.spaceship_vel+self.elapsed_time*.01)

            # print("section 1")

            if self.bomb_add_time > self.bomb_increment_time and len(self.bombs) < self.max_bomb:
                for _ in range(self.bomb_num):
                    posX,posY=random.randint(0, self.win_width),random.randint(0, 200)
                    bomb = pygame.Rect(posX, -posY, self.bomb_width, self.bomb_height)
                    self.bombs.append(bomb)

                self.bomb_add_time = 0
                self.bomb_increment_time = max(500, self.bomb_increment_time-50)

            # print("section 2")

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    run = False
                    pygame.quit()

            keys_pressed = pygame.key.get_pressed()
            if keys_pressed[pygame.K_LEFT] and self.spaceship_rect.x > 0:
                self.spaceship_rect.x -= self.spaceship_vel
            if keys_pressed[pygame.K_RIGHT] and self.spaceship_rect.x + self.spaceship_rect.width < WIDTH:
                self.spaceship_rect.x += self.spaceship_vel

            # print("section 3")

            # moving bombs
            for bomb in self.bombs:
                bomb.y += self.bomb_vel
                if bomb.y > HEIGHT:
                    self.bombs.remove(bomb)
                    self.bomb_passed+=1
                elif bomb.y + bomb.height >= self.spaceship_rect.y and bomb.colliderect(self.spaceship_rect):
                    self.bombs.remove(bomb)
                    self.hit = True
                    break

            # print("section 4")

            if self.hit:
                lost_text =self.Time_font.render("You Lost!", 1, "white")
                self.win.blit(lost_text, (self.win_width/2 - lost_text.get_width()/2, self.win_height/2 - lost_text.get_height()/2))
                pygame.display.update()
                pygame.time.delay(2000)
                break

            #DRAWING staf
            self.win.blit(self.bg_space, (0, 0))
            self.draw_opInfo()
            self.draw()

            # print("section 5")

if __name__ == "__main__":
    Obj=Game(WIDTH,HEIGHT)
    Obj.Run()
